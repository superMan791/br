/*
 * This file is generated by jOOQ.
 */
package com.tech.biran.br.common.log.db.tables;


import com.tech.biran.br.common.log.db.Test;
import com.tech.biran.br.common.log.db.tables.records.SysLogRecord;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysLog extends TableImpl<SysLogRecord> {

    private static final long serialVersionUID = 680659115;

    /**
     * The reference instance of <code>test.sys_log</code>
     */
    public static final SysLog SYS_LOG = new SysLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysLogRecord> getRecordType() {
        return SysLogRecord.class;
    }

    /**
     * The column <code>test.sys_log.title</code>.
     */
    public final TableField<SysLogRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>test.sys_log.create_by</code>.
     */
    public final TableField<SysLogRecord, String> CREATE_BY = createField(DSL.name("create_by"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>test.sys_log.create_time</code>.
     */
    public final TableField<SysLogRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>test.sys_log.remote_ip</code>.
     */
    public final TableField<SysLogRecord, String> REMOTE_IP = createField(DSL.name("remote_ip"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>test.sys_log.request_uri</code>.
     */
    public final TableField<SysLogRecord, String> REQUEST_URI = createField(DSL.name("request_uri"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>test.sys_log.param</code>.
     */
    public final TableField<SysLogRecord, String> PARAM = createField(DSL.name("param"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test.sys_log.service_name</code>.
     */
    public final TableField<SysLogRecord, String> SERVICE_NAME = createField(DSL.name("service_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>test.sys_log.trace_id</code>.
     */
    public final TableField<SysLogRecord, String> TRACE_ID = createField(DSL.name("trace_id"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>test.sys_log.success</code>.
     */
    public final TableField<SysLogRecord, Integer> SUCCESS = createField(DSL.name("success"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.sys_log.time</code>.
     */
    public final TableField<SysLogRecord, Long> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>test.sys_log.data</code>.
     */
    public final TableField<SysLogRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test.sys_log.exception</code>.
     */
    public final TableField<SysLogRecord, String> EXCEPTION = createField(DSL.name("exception"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>test.sys_log</code> table reference
     */
    public SysLog() {
        this(DSL.name("sys_log"), null);
    }

    /**
     * Create an aliased <code>test.sys_log</code> table reference
     */
    public SysLog(String alias) {
        this(DSL.name(alias), SYS_LOG);
    }

    /**
     * Create an aliased <code>test.sys_log</code> table reference
     */
    public SysLog(Name alias) {
        this(alias, SYS_LOG);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SysLog(Table<O> child, ForeignKey<O, SysLogRecord> key) {
        super(child, key, SYS_LOG);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public SysLog as(String alias) {
        return new SysLog(DSL.name(alias), this);
    }

    @Override
    public SysLog as(Name alias) {
        return new SysLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(String name) {
        return new SysLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(Name name) {
        return new SysLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, LocalDateTime, String, String, String, String, String, Integer, Long, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
